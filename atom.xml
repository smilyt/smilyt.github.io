<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://smilyt.github.io</id>
    <title>smilyt_的博客</title>
    <updated>2020-06-14T12:21:05.571Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://smilyt.github.io"/>
    <link rel="self" href="https://smilyt.github.io/atom.xml"/>
    <subtitle>博客，记录蒟蒻生活</subtitle>
    <logo>https://smilyt.github.io/images/avatar.png</logo>
    <icon>https://smilyt.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, smilyt_的博客</rights>
    <entry>
        <title type="html"><![CDATA[记2020/06/13刷题（力扣双周赛）]]></title>
        <id>https://smilyt.github.io/post/ji-20200613-shua-ti-li-kou-shuang-zhou-sai/</id>
        <link href="https://smilyt.github.io/post/ji-20200613-shua-ti-li-kou-shuang-zhou-sai/">
        </link>
        <updated>2020-06-13T15:52:06.000Z</updated>
        <content type="html"><![CDATA[<p>这次双周赛我不会t3啊，有没有搞错<br>
<strong>5420. 商品折扣后的最终价格</strong>😄<br>
这个数据量直接暴力</p>
<p><strong>5422. 子矩形查询</strong>😄<br>
暴力</p>
<p><strong>5423. 找两个和为目标值且不重叠的子数组</strong>😭<br>
我不会，一会补题</p>
<p><strong>5421. 安排邮筒</strong>😄<br>
老dp了，写个题解</p>
<h1 id="t4题解">t4题解</h1>
<h2 id="题意">题意</h2>
<p>就是有n个房子放k个邮箱，求最近距离<br>
dp题，我们来考虑状态</p>
<h2 id="状态分析">状态分析</h2>
<p>很明显，存在两个状态，房子位置 i 和放置邮箱数 j，所以应该是二维dp<br>
分析这个题，它其实就是在分割房子，把房子切成一片片的，每一片放一个邮箱<br>
最终切成k片</p>
<p>为了验证想法是否正确，要考虑两个东西：<br>
1.状态转移方程，假如能够写出状态转移方程，那肯定可能是正确的<br>
2.时间复杂度，假如不超时，那么结合1，就是正确的了</p>
<p>考虑一个dp[i][j]的含义，就是在前i个房子，放置j个邮箱；所以最终只需要求出dp[n-1][k]即可。<br>
j代表前i栋房子被划分为j片，把最后一片拿出来，当作新加入的片，那么前j-1片岂不就是dp[x]<a href="x%E6%98%AF0~i-1%E4%B8%AD%E7%9A%84%E6%9F%90%E4%B8%AA%E6%95%B0">j-1</a><br>
因为我们可以把任意个房子分到最后一片，所以是要穷举最后一片的数量的<br>
从上面我们可以看出，其实是从dp[x]<a href="x%E4%B8%BA0%E5%88%B0i-1">j-1</a>--&gt;dp[i][j]</p>
<p>那么最后一片放入一个邮箱怎么求最小距离？</p>
<h2 id="求一个片房子放入一个邮箱的最小距离">求一个片房子放入一个邮箱的最小距离</h2>
<p>假如只有一个房子，0<br>
假如有两个房子呢，你会发现只要邮箱放入两个房子中间，是不是最小距离都是两栋房子的距离？<br>
假如有三栋房子呢，是不是一栋房子两边加了两栋<br>
四栋呢？一样的</p>
<h2 id="例子">例子</h2>
<p>为了方便大家理解，我给出一个例子：<br>
首先总结一下上述步骤：<br>
1.给房子排序，位置从小到大<br>
2.计算每一片放入一个邮箱的最小花费<br>
3.初始化dp<br>
4.dp</p>
<p>给一个长度为4的数组吧： h=[1,3,10,5] ; k=4</p>
<p>第一步排序：[1,3,5,10]<br>
第二步计算最小花费：d[4][4]</p>
<pre><code>d[i][j]代表从房子i到房子j放入一个邮箱的最小花费
d[0][0]=d[1][1]=d[2][2]=d[3][3]=0  //一栋房子
d[0][1]=2,dp[1][2]=2,d[2][3]=5       //两栋房子
现在的矩阵：          
0 2 / /                        
/ 0 2 /
/ / 0 5
/ / / 0
用d[i][j]=d[i+1][j-1]+h[j]-h[i]来补全d，d[0][3]就是相当于d[1][2]两端增加了h[0]和h[3]
因为[1,2]中间肯定在[0,3]中间，所以直接加上h[3]-h[0]即可

最终求出d:
0 2 4 11 
/ 0 2 7
/ / 0 5
/ / / 0
</code></pre>
<p>计算dp，把所有的dp都初始化为inf=100000000<br>
dp[n]<a href="dp%5B4%5D%5B5%5D">k+1</a></p>
<p>dp[i][1]的值都清楚，就是d[0][0]~d[0][n-1]，这作为dp的初始化</p>
<pre><code>dp:(k=0不显示)
0 2 4 11
/  /  /  /
/  /  /  /
/  /  /  /
</code></pre>
<p>每次我们的i从j-1开始，因为i&gt;=j-1才有意义，所以：<br>
求dp[1][2]就是把[0,1]分成2片，只有一种分法，把[1]作为最后一片：</p>
<pre><code>dp[1][2]=min(dp[1][2],dp[0][1]+d[1][1])
</code></pre>
<p>求dp[2][2]就是把[0,1,2]分成2片，有两种分法，把[1,2]作为最后一片，把[2]作为最后一片:</p>
<pre><code>把[1,2]作为最后一片：
dp[2][2]=min(dp[2][2],dp[0][1]+d[1][2]);
把[2]作为最后一片：
dp[2][2]=min(dp[2][2],dp[1][1]+d[2][2]);
</code></pre>
<p>求dp[3][2]就是把[0,1,2,3]分成2片，有三种分法，把[1,2,3]最为最后一片，把[2,3]作为最后一片，把[3]作为最后一片：</p>
<pre><code>把[1,2,3]最为最后一片：
dp[3][2]=min(dp[3][2],dp[0][1]+d[1][3]);
把[2,3]作为最后一片:
dp[3][2]=min(dp[3][2],dp[1][1]+d[2][3]);
把[3]作为最后一片：
dp[3][2]=min(dp[3][2],dp[2][1]+d[3][3]);
</code></pre>
<p>j=3和j=4同理；<br>
最后计算dp为：略(懒得算)</p>
<p>代码还有必要吗，我写的那么详细</p>
<h2 id="总结">总结</h2>
<p>计算一下时间复杂度，大概为O(n^2<em>k)<br>
空间复杂度O(n</em>n)</p>
<p>求个赞<br>
有问题评论区见</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[记2020/06/12日cf刷题]]></title>
        <id>https://smilyt.github.io/post/ji-20200612-ri-cf-shua-ti/</id>
        <link href="https://smilyt.github.io/post/ji-20200612-ri-cf-shua-ti/">
        </link>
        <updated>2020-06-12T00:36:09.000Z</updated>
        <content type="html"><![CDATA[<p>今天来补昨天的呢div2.<br>
Educational Codeforces Round 89 (Rated for Div. 2)</p>
<p><strong>A. Shovels and Swords</strong>😄<br>
本题为一道简单的数学题，公式一推就可以秒杀。</p>
<p><strong>B. Shuffle</strong>😄<br>
本题为双指针，记录区间端点并不断更新。</p>
<p><strong>C. Palindromic Paths</strong>😄<br>
本题利用贪心思想，总有两条对角线是对应的，该对角线所有的值都应该相同。</p>
<p><strong>D. Two Divisors</strong>😭<br>
本题为数论题，数论蒟蒻哭出声来。直接寻求大佬的帮助。</p>
<p>是这样的，首先使用欧拉筛，以前学习过欧拉筛，不过还要再学习一次。<br>
欧拉筛的复杂度是O(n)，原理是筛去每个数只使用他的最小因数。</p>
<pre><code>//欧拉筛代码，直接背板子
int m,prime[10005],vis[10005];
int init(){
    m=0;
    for(int i=2;i&lt;10005;i++){
	    if(!vis[i]){
		    ++m;
		    prime[m]=i;
	    }
	
	    for(int j=1;j&lt;=m &amp;&amp; i*prime[j]&lt;10005;j++){
		    vis[i*prime[j]]=1;
		    if(i%prime[j]==0) break;
	    }
    }
}
</code></pre>
<p>然后进行质因数的分解，假设要分解a[i]：</p>
<pre><code>//分解质因数
void init2(){
    for(int j=1;j&lt;=m;j++){
	    int pj=prime[j];
	    if(pj*pj&gt;a[i]) break;
	    if(a[i]%pj==0){
		    cnt++;
		    p[cnt]=pj;
		    c[cnt]=0;
		    while(a[i]%pj==0){
			    a[i]/=pj;
			    c[cnt]++;
		    }
	    }
    }
}
</code></pre>
<p>同时也可以在筛的时候分解质因数：</p>
<pre><code>int primes[5000000];
int prime_n = 0;
int minPrime[10000010];

void init() {
    primes[prime_n++] = 2;
    minPrime[2] = 2;
    for (int i = 3;i &lt;= 10000000;i++) {
            if (minPrime[i] == 0) {
                    minPrime[i] = i;
                    primes[prime_n++] = i;
            }

            for (int j = 0;j &lt; prime_n &amp;&amp; primes[j] &lt; minPrime[i] &amp;&amp; i * primes[j] &lt;= 10000000;j++) {
                    minPrime[i * primes[j]] = primes[j];
            }
    }
}
</code></pre>
<p>然后考虑数论问题：如何找到a[i]中两个因数使它们的和相加不是a[i]的因子？<br>
首先考虑a[i]的一个因子d:<br>
必定存在d1有d|d1<br>
因为d|a[i]<br>
所以只需要找到d2使得d不能整除d2，那么d1+d2就肯定不可以整除a[i]<br>
所以找到一个质因数即可，用上面的筛筛质数的同时也找到了质因子，可以解此题！</p>
<p><strong>E. Two Arrays</strong>😄<br>
可以以b中元素为分割点把a中元素分隔开，假如出现a中有多个相同b中元素，就取下标最大的。<br>
因为b为递增的，取下标小的没有意义。<br>
而每两个b中元素之间的种数就是两者之间的距离。假如两者中间存在比它们都小的元素答案就是0.<br>
分析到最后，实际上就是从最右边向最左边求最小值。<br>
很简单</p>
<p>剩下两题不会了，不补了</p>
<p>再来场div3吧： Codeforces Round #611 (Div. 3)</p>
<p><strong>A. Minutes Before the New Year</strong>800 😄<br>
简单数学题</p>
<p><strong>B. Candies Division</strong>900 😄<br>
简单的数学题</p>
<p><strong>C. Friends and Gifts</strong>1500 😄<br>
中等的数学题</p>
<p><strong>D. Christmas Trees</strong>1800 😄<br>
最短路就用bfs，直接把所有的x加进去bfs就完了<br>
注意一定不要用hash，<strong>再用hash我是傻逼</strong></p>
<p><strong>E. New Year Parties</strong>1800<br>
<strong>F. DIY Garland</strong>2200<br>
以后写</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[记2020/06/11日cf刷题]]></title>
        <id>https://smilyt.github.io/post/ji-20200611-ri-cf-shua-ti/</id>
        <link href="https://smilyt.github.io/post/ji-20200611-ri-cf-shua-ti/">
        </link>
        <updated>2020-06-11T05:19:12.000Z</updated>
        <content type="html"><![CDATA[<p>好久不刷题，最近课程繁重，人比较懒</p>
<p><strong>F. Two Bracket Sequences</strong>😭 2200<br>
还是上次剩的F题开，2200分dp，不会直接看题解学习了。。</p>
<p>体会与总结：<br>
F题是一道字符串dp，然后根据结果还原路径的题。<br>
对于两个字符串dp，好像所有的都是·二维以上的，因为两维i，j是用来记录两个字符串下标的。<br>
其次，对于是否有其他的维度，就考虑别的状态，本题第三个状态是剩余的左括号数。</p>
<p>这种题不能直接在dp里放字符串，因为会炸空间，所以只能放长度，最小长度，然后从后往前还原。</p>
<p>分别讨论在i，j这个地方是放'('还是')'：<br>
假如放'('，那么i处为'('，j处为'('或者两者都为'('，和在i-1，j-1处有k-1个左括号相同。<br>
右括号也是一样的。</p>
<p>之后再记录之前的状态，就可以倒推回去。<br>
如果有办法不记录之前的状态就可以推回去，那也可以不记录，不过本题我未发现这样的办法。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[记2020/06/07刷题（力扣周赛）]]></title>
        <id>https://smilyt.github.io/post/ji-20200607-shua-ti-li-kou-zhou-sai/</id>
        <link href="https://smilyt.github.io/post/ji-20200607-shua-ti-li-kou-zhou-sai/">
        </link>
        <updated>2020-06-07T03:16:14.000Z</updated>
        <content type="html"><![CDATA[<p>这是192场周赛<br>
题目很水，但是交的时候不小心错了一次😭</p>
<p><strong>1. 重新排列数组</strong>😄<br>
两个数组合并成一个，太容易了</p>
<p><strong>2. 数组中的 k 个最强值</strong>😄<br>
这个就是用lambda表达式排序的题，排两次就可以</p>
<p><strong>3. 设计浏览器历史记录</strong>😄<br>
这是一个设计题，用一个记录url数量，一个记录当前位置，在一个数组里移动就可以了</p>
<p><strong>4. 给房子涂色 III</strong>😄<br>
这是一个dp题，我准备写个题解</p>
<h1 id="t4题解">t4题解</h1>
<h2 id="题意">题意</h2>
<p>给一排房子，涂颜色，最后形成target个社区（相邻房子颜色相同视为一个社区）</p>
<h2 id="状态以及状态转移方程">状态以及状态转移方程</h2>
<p>对于一道dp题来说，很显然，我们要找到它的状态转移方程，怎么找到状态转移方程呢?<br>
大佬当然是直接一眼看出来，不过像我这样的蒟蒻就要一点点分析了。</p>
<h3 id="寻找状态">寻找状态</h3>
<p>个人认为，假如想要找到状态转移方程，首先要找到的是状态。<br>
那么本题有几个状态呢，我感觉不难找出，一共有三个：分别是房子所在位置，房子涂的颜色，房子形成的社区<br>
那么dp[i][j][k]就代表第i个房子涂第j个颜色，前i个房子形成了k个社区。<br>
好的，通过找出状态我们顺便定义了，三维dp数组的意义</p>
<h3 id="分析状态">分析状态</h3>
<p>接下来自然要找到状态转移方程，先分析状态。<br>
寻找状态转移方程的大致思路是把每一维都由初始状态往上加，直到终止状态。<br>
说到这里，我们先考虑初始状态。<br>
分析这三个状态：<br>
对于i来说，初始值自然是0，终止值是m-1，表明从第0个房子到第m-1个房子这m个房子<br>
对于j来说，它的值是有houses[i]决定的，假如houses[i]为0，那么j可以随意变动，假如houses[i]不为0，那么j有唯一值<br>
对于k来说，初始值是1，终止值是target，表明从1个社区到target个社区</p>
<p>分析状态之后，我们发现只需要把i从0到m-1转移，k从1到target转移即可，那么j呢？<br>
j只是一个工具变量，最后我们可以访问dp[m-1][j][target] (1&lt;=j&lt;=n)这n个值，寻找最小值作为答案，所以j没有初始也没有终止，我们需要计算出所有的j（实际上j的存在就是为k的转移服务的，不明白的继续往下看）</p>
<h3 id="寻找初始值">寻找初始值</h3>
<p><strong>inf=100000000</strong> 首先把dp数组都初始化为inf，因为有些值不可以出现，这样可以排除不能出现的值和答案竞争</p>
<p>根据houses[0]是否为0来初始化，dp[0][j][1] 因为最初肯定在0号房子只有一个社区，j是不定的，所以初始化这些</p>
<pre><code>if(houses[0]!=0)
    dp[0][houses[0]][1]=0  
房子已经有颜色，所以不能涂色而且花费为0

if(houses[0]==0)
    for(int j=1;j&lt;=n;j++) dp[0][j][1]=cost[i][j-1]
房子无颜色，所以可以涂任意颜色
</code></pre>
<h3 id="开始转移">开始转移</h3>
<p>i的转移就是i的值是从i-1的值得到的<br>
k的值是由当前房子颜色和前一个房子颜色作比较得到的：<br>
1.i号房子颜色和i-1号房子颜色相同，i,k的值从i-1,k得到<br>
2.i号房子颜色和i-1号房子颜色不同，i,k的值从i-1,k-1得到<br>
把这两个写成状态转移方程(下面内容不是正式代码，仅供理解)：假设i号房子颜色为j1，i-1号房子颜色为j2</p>
<pre><code>1.j1==j2
dp[i][j1][k]&lt;---dp[i-1][j2][k]
2.j1!=j2
dp[i][j1][k]&lt;---dp[i-1][j2][k-1]
</code></pre>
<p>现在唯一的问题就是处理颜色了，这不是很简单嘛，直接列出所有颜色就可以了，只有20种颜色，不可能超时的。<br>
有一点要注意的就是houses[i]的值：<br>
1.假如不为0，那么j1只有唯一值，只需要穷举j2，而且不加cost<br>
2.假如为0，那么穷举j1和j2，加cost<br>
感觉会了的同学已经可以去写代码了，感觉不会的同学可以再看一下前面的理解理解去写代码。</p>
<h3 id="提前总结">提前总结</h3>
<p>做一个小总结，总结以下大致步骤，方便大家先自己写代码：<br>
1.用inf初始化所有dp值<br>
2.初始化dp[0][j][1]<br>
3.转移：dp[0][j][1]-&gt;dp[m-1][j][target]，对于每个i，考虑houses[i]是否为0<br>
4.从所有dp[m-1][j][target]找到最小值<br>
5.处理答案不存在的情况</p>
<p>最后附上我惨不忍睹的代码</p>
<h2 id="代码">代码</h2>
<pre><code class="language-cpp">#define inf 1e8
class Solution {
public:
    int minCost(vector&lt;int&gt;&amp; houses, vector&lt;vector&lt;int&gt;&gt;&amp; cost, int m, int n, int target) {
        //inf排除不可能的值
        vector&lt;vector&lt;vector&lt;int&gt;&gt;&gt; dp(m,vector&lt;vector&lt;int&gt;&gt;(n+1,vector&lt;int&gt;(target+1,inf)));
        //初始化
        if(houses[0]!=0) dp[0][houses[0]][1]=0;
        else{
            for(int i=1;i&lt;=n;i++){
                dp[0][i][1]=cost[0][i-1];
            }
        }
        
        //dp状态转移
        for(int i=1;i&lt;m;i++){
            if(houses[i]==0){//为0，穷举j1和j2
                for(int j1=1;j1&lt;=n;j1++){
                    for(int k=1;k&lt;=target;k++){
                        for(int j2=1;j2&lt;=n;j2++){
                            //在穷举j1和j2中也会有j1==j2，注意哟
                            if(j1==j2) dp[i][j1][k]=min(dp[i][j1][k],dp[i-1][j2][k]+cost[i][j1-1]);
                            else dp[i][j1][k]=min(dp[i][j1][k],dp[i-1][j2][k-1]+cost[i][j1-1]);
                        }
                    }
                }
            }else{//不为0，穷举j2
                for(int k=1;k&lt;=target;k++){
                    for(int j2=1;j2&lt;=n;j2++){
                        int j1=houses[i];
                        if(j1==j2) dp[i][j1][k]=min(dp[i][j1][k],dp[i-1][j2][k]);
                        else dp[i][j1][k]=min(dp[i][j1][k],dp[i-1][j2][k-1]);
                    }
                }
            }
        }
        //遍历以下所有的j，寻找答案
        int ans=1e8;
        for(int i=1;i&lt;=n;i++) ans=min(ans,dp[m-1][i][target]);
        if(ans==1e8) ans=-1; //注意处理一下不存在答案，我就忘了，wa一次，嘤嘤嘤了
        return ans;
    }
};
</code></pre>
<h2 id="总结">总结</h2>
<p>不知道总结点什么......<br>
分析一下复杂度吧：<br>
假设房子有m栋，颜色有n个，target为t<br>
要考虑最大的可能，每一栋穷举了两次颜色，而且求出了所有的target值，所以:<br>
时间复杂度为O(mt*n^2)<br>
空间复杂度为O(mtn)<br>
希望能够帮到大家<br>
求个赞</p>
<p>有问题的评论区见<br>
散会</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[记2020/06/06日cf刷题]]></title>
        <id>https://smilyt.github.io/post/ji-20200606-ri-cf-shua-ti/</id>
        <link href="https://smilyt.github.io/post/ji-20200606-ri-cf-shua-ti/">
        </link>
        <updated>2020-06-06T03:57:39.000Z</updated>
        <content type="html"><![CDATA[<p>今天做一个div3<br>
Codeforces Round #605 (Div. 3)</p>
<p><strong>A. Three Friends</strong>😄 900<br>
直接暴力穷举所有可能即可</p>
<p><strong>B. Snow Walking Robot</strong>😄 1200<br>
这是一个构造题，找规律构造即可</p>
<p><strong>C. Yet Another Broken Keyboard</strong>😄 1200<br>
双指针，窗口滑动，模板题</p>
<p><strong>D. Remove One Element</strong>😭 1500<br>
一道很常规的dp题，但是手笨头晕打错了好几次</p>
<p><strong>E. Nearest Opposite Parity</strong>😭 1900<br>
猛一看是dfs题，写了半天不对。<br>
再一想<strong>最短路还是用bfs香</strong>，就相当于先求所有点到值为奇的最短距离，再求到值为偶的最短距离。<br>
还是太年轻了</p>
<p>在bfs时可能两个点不是双向的，而是单向的，考虑好从哪个点到哪个点非常重要</p>
]]></content>
    </entry>
</feed>